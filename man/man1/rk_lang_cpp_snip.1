.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_LANG_CPP_SNIP Reference" "" "" ""
.SH Print variable
.IP
.EX
std::cout << \[dq]$1 = \[dq] << \f[B]$\f[R]{1} << std::endl;
.EE
.SH Print
.IP
.EX
std::cout << \[dq]${1:Message}\[dq] << std::endl;
.EE
.SH C++ template
.IP
.EX
#include \f[B]<iostream>\f[R]

int main() {
  std::cout << \[dq]Hello, World!\[dq] << std::endl;
}
.EE
.SH Main function
.IP
.EX
int main() {
  \f[B]$\f[R]{1:std::cout << \[dq]Hello, World!\[dq] << std::endl;}
}
.EE
.SH Include for \f[CR]cout\f[R]
.IP
.EX
#include \f[B]<iostream>\f[R]
.EE
.SH Print with address
.IP
.EX
std::cout << \f[B]this\f[R] << \[dq] ${1:message}\[dq] << std::endl;
.EE
.SH Print variable with address
.IP
.EX
std::cout << \f[B]this\f[R] << \[dq] $1 = \[dq] << \f[B]$\f[R]{1} << std::endl;
.EE
.SH Print array with address
.IP
.EX
std::cout << \f[B]this\f[R] << \[dq] ${1} = \[dq];
\f[B]for\f[R] (std::size_t i = 0; i < \f[B]$\f[R]1.\f[B]size\f[R](); ++i) {
  std::cout << (i > 0 ? \[dq], \[dq] : \[dq]\[dq]) << \f[B]$\f[R]1[i];
}
std::cout << std::endl;
.EE
.SH Print array
.IP
.EX
std::cout << \[dq]${1} = \[dq];
\f[B]for\f[R] (std::size_t i = 0; i < \f[B]$\f[R]1.\f[B]size\f[R](); ++i) {
  std::cout << (i > 0 ? \[dq], \[dq] : \[dq]\[dq]) << \f[B]$\f[R]1[i];
}
std::cout << std::endl;
.EE
.SH Print map with address
.IP
.EX
std::cout << \f[B]this\f[R] << \[dq] ${1} = {\[dq];
bool first = \f[B]true\f[R];
\f[B]for\f[R] (const \f[B]auto\f[R]& pair : values) {
  \f[B]if\f[R] (!first) {
    std::cout << \[dq], \[dq];
  }
  std::cout << \[dq]{\[dq] << pair.first << \[dq]: \[dq] << pair.second << \[dq]}\[dq];
  first = \f[B]false\f[R];
}
std::cout << \[dq]}\[dq] << std::endl;
.EE
.SH Print map
.IP
.EX
std::cout << \[dq]${1} = {\[dq];
bool first = \f[B]true\f[R];
\f[B]for\f[R] (const \f[B]auto\f[R]& pair : values) {
  \f[B]if\f[R] (!first) {
    std::cout << \[dq], \[dq];
  }
  std::cout << \[dq]{\[dq] << pair.first << \[dq]: \[dq] << pair.second << \[dq]}\[dq];
  first = \f[B]false\f[R];
}
std::cout << \[dq]}\[dq] << std::endl;
.EE
.SH For loop
.IP
.EX
\f[B]for\f[R] (int \f[B]$\f[R]{1:i} = 0; \f[B]$\f[R]1 < \f[B]$\f[R]{2:10}; \f[B]$\f[R]1++) {
    \f[B]$\f[R]0
}
.EE
.SH For loop array
.IP
.EX
\f[B]for\f[R] (std::size_t \f[B]$\f[R]{1:i} = 0; \f[B]$\f[R]1 < \f[B]$\f[R]{2}.size(); ++\f[B]$\f[R]1) {
    \f[B]$\f[R]{3:std::cout << \f[B]$\f[R]2[\f[B]$\f[R]1] << std::endl;}
}
.EE
.SH For loop array range
.IP
.EX
\f[B]for\f[R] (int \f[B]$\f[R]{1:element} : \f[B]$\f[R]{2}) {
    \f[B]$\f[R]{3:std::cout << \f[B]$\f[R]1 << std:endl;}
}
.EE
.SH For loop array iterator
.IP
.EX
\f[B]for\f[R] (\f[B]auto\f[R] it = \f[B]$\f[R]{1:arr}.begin(); it != \f[B]$\f[R]1.\f[B]end\f[R](); ++it) {
    \f[B]$\f[R]{2:std::cout << *it << std::endl;}
}
.EE
