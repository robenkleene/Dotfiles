.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_BASH_COND Reference" "" "" ""
.SH Unbound Variables
Safely testing for a unbound variable (this allows \f[CR]set \-u\f[R] to
be on to fail if an unbound variable is found):
.IP
.EX
if [[ \-n \[dq]${file_path:\-}\[dq] ]]; then
.EE
.SH Boolean
Bash doesn\[cq]t support boolean variables natively, a workaround is to
just set a variable:
.IP
.EX
foo=1
.EE
.PP
And then use a check for whether that variable is empty:
.IP
.EX
if [[ \-n \[dq]${foo:\-}\[dq] ]]; then
.EE
.SH Equality
These are equivalent:
.IP
.EX
[[ $x == \[dq]$y\[dq] ]]
[[ $x = \[dq]$y\[dq] ]]
[ \[dq]$x\[dq] == \[dq]$y\[dq] ]
[ \[dq]$x\[dq] = \[dq]$y\[dq] ]
.EE
.SH String Comparison
In Bash the right hand side is always a glob.
.PP
This compares \f[CR]$PWD\f[R] to a string with wildcards, this isn\[cq]t
comparing files, just strings:
.IP
.EX
[[ $PWD/ = $HOME/*/* ]]
.EE
.PP
This exits \f[CR]1\f[R] in \f[CR]\[ti]\f[R] and \f[CR]/\f[R], but exits
\f[CR]0\f[R] in \f[CR]\[ti]/Desktop\f[R].
.PP
This appears to be equivalent:
.IP
.EX
[[ $PWD = $HOME/* ]]
.EE
.PP
As does this:
.IP
.EX
[[ $PWD =\[ti] $HOME/.* ]]
.EE
