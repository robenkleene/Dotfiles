.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_LANG_CPP_PRINT Reference" "" "" ""
.SH Logging Multiple Callstack Levels
Sometimes you need to log something at one callstack level with state at
another call stack level.
.PP
This can be accomplished by passing a string argument in to a function,
appending to that string variable, and then printing the result in the
calling function.
.PP
Calling function:
.IP
.EX
// Make a \[ga]logging\[ga] string pointer
std::unique_ptr<std::string> logging = std::make_unique<std::string>();
// Pass it as a reference to the lower\-level function to debug
foo(bar, *logging);
.EE
.IP
.EX
#include <sstream>

// ...

// Use overloading so other callers to the original function still compile
void foo(int bar) {
    std::unique_ptr<std::string> logging = std::make_unique<std::string>();
    foo(bar, logging);
}
// In the lower\-level function to debug, appending to the \[ga]logging\[ga] variable
void foo(int bar, std::string& logging) {
    // ...
    std::stringstream ss;
    ss << \[dq]worldToUnitGeometry = \[dq] << MathCommon::ToString(worldToUnitGeometry);
    logging += ss.str();
}
.EE
.PP
Also update the header for \f[CR]foo\f[R]:
.IP
.EX
void foo(int bar, std::string& logging) {
.EE
