.\" Automatically generated by Pandoc 3.6
.\"
.TH "RK_SNIPPETS Reference" "" "" ""
.PP
The format used by Visual Studio Code and other editors.
.PP
\f[CR]$0\f[R] designates the last placeholder, by default this is the
end of the snippets.
This means snippets that are meant to be used recursively should look
like \f[CR][[ ${0:true} ]]\f[R] in order to not have to tab again at the
end of the snippet and instead got to the next placeholder in a
recursive snippet, while snippets that are a full statement themselves
should typically use \f[CR]$1\f[R] (without \f[CR]$0\f[R]) so the last
tab brings the cursor to the end of the snippet.
.SS Creating
The easiest way to create a complex snippet, with multiple lines and
escaped characters, is to leverage multiple cursors.
.IP "1." 3
Select the multi\-line snippet
.IP "2." 3
Enter multiple cursors (\f[CR]⇧⌘I\f[R]).
.IP "3." 3
Go to the beginning of each line (\f[CR]⌃A\f[R])
.IP "4." 3
Hit delete, and then entire \f[CR]\[rs]n\f[R].
.IP "5." 3
Select a character that needs escaping and do a find for it with
\f[CR]⌘E\f[R].
Select the entire line, make sure \f[CR]Find in selection\f[R] is on
(\f[CR]⇧⌘L\f[R]).
Hit \f[CR]⌥↩\f[R] to create a cursor for each selection match, and
escape the character.
Repeat for each other character that needs escaping.
.PP
Typically \f[CR]\[dq]\f[R] needs to be escaped, and \f[CR]$\f[R] needs
to be double escaped to prevent using it as tab\-replacement.
