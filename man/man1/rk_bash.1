.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_BASH Reference" "" "" ""
.IP \[bu] 2
\f[CR]$(command)\f[R]: Command substitution, the result of the command
replaces the \f[CR]cat $(ls)\f[R] command.
.IP \[bu] 2
\f[CR]( list )\f[R] and \f[CR]{ list; }\f[R] are used to group commands,
e.g., \f[CR](ls *.js; ls *.css) | grep test\f[R].
The difference is that \f[CR]()\f[R] creates a sub\-shell and
\f[CR]{}\f[R] does not.
(Note that the \f[CR];\f[R] is required only with \f[CR]{}\f[R].)
.IP \[bu] 2
\f[CR]type <command>\f[R]: Tells whether a command is a function,
built\-in, or alias.
.IP \[bu] 2
\f[CR]fc\f[R]: Edit last command in \f[CR]$EDITOR\f[R].
.IP \[bu] 2
\f[CR]!:q\f[R] in Bash prints out the previous command escaped
.SH One Liner
Use the following to work with a variable:
.IP
.EX
var=\[dq].test\[dq]; echo \[dq]$var ${var#.}\[dq]
.EE
.SH \f[CR]getopts\f[R]
In \f[CR]while getopts \[dq]:a:bh\[dq] option\f[R], the first
\f[CR]:\f[R] runs \f[CR]getopts\f[R] in \[lq]silent error checking
mode\[rq], e.g., if you want to handle error messages yourself.
In \f[CR]a:\f[R], it means the \f[CR]a\f[R] flag can have arguments.
.SH Terminal Emulator
Opening files:
.IP
.EX
fd ultisnips \-0 | xargs \-o \-0 vim
.EE
.IP \[bu] 2
\f[CR]\-o\f[R] / \f[CR]\-\-open\-tty\f[R]: Re\-open stdin as a tty, this
suppresses the \[lq]Input is not from a terminal\[rq] warning in Vim
