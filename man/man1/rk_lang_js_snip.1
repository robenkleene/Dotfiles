.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_LANG_JS_SNIP Reference" "" "" ""
.SH Print variable
.IP
.EX
console.log(\[dq]$1 = \[dq] + ${1});
.EE
.SH Print
.IP
.EX
console.log(\[dq]${1:Message}\[dq]);
.EE
.SH JavaScript template
.IP
.EX
\f[I]#!/usr/bin/env node\f[R]

.EE
.SH For loop
.IP
.EX
\f[B]for\f[R] (\f[B]let\f[R] ${1:i} = 0; $1 < ${2:10}; $1++) {
  $0
}
.EE
.SH Max post
.IP
.EX
post(\[dq]${1:message}\[dq]);
.EE
.SH Max post variable
.IP
.EX
post(\[dq]$1 = \[dq] + ${1} + \[dq]\[rs]n\[dq]);
.EE
.SH Max JavaScript template
.IP
.EX
[\[dq]// Inlets & Outlets\[dq],\[dq]inlets = 3;\[dq],\[dq]outlets = 3;\[dq],\[dq]\[dq],\[dq]// Store input\[dq],\[dq]var values = [0, 0, 0];\[dq],\[dq]\[dq],\[dq]// \[ga]inlet\[ga] property reports the inlet number\[dq],\[dq]\[dq],\[dq]// \[ga]msg_int()\[ga] is called when an int is received\[dq],\[dq]function msg_int(value) {\[dq],\[dq]  values[inlet] = value;\[dq],\[dq]  outlet(inlet, \[rs]\[dq]int \[rs]\[dq] + value);\[dq],\[dq]}\[dq],\[dq]\[dq],\[dq]// \[ga]msg_float()\[ga] is called when a float is received\[dq],\[dq]function msg_float(value) {\[dq],\[dq]  values[inlet] = value;\[dq],\[dq]  outlet(inlet, \[rs]\[dq]float \[rs]\[dq] + value);\[dq],\[dq]}\[dq],\[dq]\[dq],\[dq]// \[ga]bang()\[ga] is called when a bang is received\[dq],\[dq]function bang() {\[dq],\[dq]  // The string \[ga]\[rs]\[dq]bang\[rs]\[dq]\[ga] sends a bang out the outlet\[dq],\[dq]  outlet(inlet, \[rs]\[dq]bang\[rs]\[dq]);\[dq],\[dq]}\[dq],\[dq]\[dq],\[dq]// \[ga]list()\[ga] is called when a message starts with \[ga]list\[ga]\[dq],\[dq]// Only messages that beginning with a number (e.g., \[ga]1, b, 3, d\[ga]) will call\[dq],\[dq]// \[ga]list\[ga] (otherwise \[ga]anything\[ga] will be called).\[dq],\[dq]function list(value) {\[dq],\[dq]  // \[ga]value\[ga] is only the first argument\[dq],\[dq]  // If the first parameter is a symbol, then it\[aq]s treated as a function name\[dq],\[dq]  post(\[rs]\[dq]value = \[rs]\[dq] + value);\[dq],\[dq]  // If the input is all numbers, \[ga]messagename\[ga] is \[ga]list\[ga]\[dq],\[dq]  post(\[rs]\[dq]messagename = \[rs]\[dq] + messagename);\[dq],\[dq]  process_arguments(inlet, messagename, arguments, \[rs]\[dq]list\[rs]\[dq]);\[dq],\[dq]}\[dq],\[dq]\[dq],\[dq]// \[ga]anything()\[ga] is called when there\[aq]s no function match\[dq],\[dq]function anything(value) {\[dq],\[dq]  // \[ga]value\[ga] is only the first argument\[dq],\[dq]  post(\[rs]\[dq]value = \[rs]\[dq] + value);\[dq],\[dq]  // If input starts \[ga]messagename\[ga] is the first symbol in a list\[dq],\[dq]  // E.g., if \[ga]a b c\[ga] is passed in, it\[aq]s \[ga]a\[ga]\[dq],\[dq]  post(\[rs]\[dq]messagename = \[rs]\[dq] + messagename);\[dq],\[dq]  process_arguments(inlet, messagename, arguments, \[rs]\[dq]anything\[rs]\[dq]);\[dq],\[dq]}\[dq],\[dq]\[dq],\[dq]function process_arguments(inlet, firstElement, arguments, prefix) {\[dq],\[dq]  // In a called function, \[ga]messagename\[ga] is the name of the function that called this one (e.g., \[ga]anything\[ga] or \[ga]list\[ga])\[dq],\[dq]  // The \[ga]arguments\[ga] property can be numerically indexed like an \[ga]Array\[ga] but is not an instance of \[ga]Array\[ga].\[dq],\[dq]  // \[ga]arrayfromargs\[ga] converts to an actual array\[dq],\[dq]  var arr = arrayfromargs(firstElement, arguments);\[dq],\[dq]  outlet(inlet, prefix + \[rs]\[dq] \[rs]\[dq] + arr.join());\[dq],\[dq]}\[dq],\[dq]\[dq],\[dq]function log(obj) {\[dq],\[dq]  // \[ga]post\[ga] logs to console\[dq],\[dq]  post(JSON.stringify(obj));\[dq],\[dq]}\[dq],\[dq]\[dq]]
.EE
