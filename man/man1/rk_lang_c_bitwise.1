.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_LANG_C_BITWISE Reference" "" "" ""
.IP \[bu] 2
\f[CR]&\f[R]: AND, used to mask off some set of bits, e.g.,
\f[CR]n & 0177\f[R] masks off all but the lower\-order 7 bits of
\f[CR]n\f[R] because \f[CR]0177\f[R] (which is in octal) is 127 in
base\-10, which is seven ones in the lower\-order bits in binary.
.IP \[bu] 2
\f[CR]|\f[R]: OR
.IP \[bu] 2
\f[CR]\[ha]\f[R]: Exclusive OR
.IP \[bu] 2
\f[CR]<<\f[R]: Left shift, e.g., \f[CR]0b100 << 2 = 0b10000\f[R]
.IP \[bu] 2
\f[CR]>>\f[R]: Right shift, e.g., \f[CR]0b100 >> 2 = 0b1\f[R]
.IP \[bu] 2
\f[CR]\[ti]\f[R]: One\[cq]s complement (unary operator), inverts all
\f[CR]1\f[R] and \f[CR]0\f[R].
E.g., \f[CR]\[ti]00001 = 11110\f[R]
.SH Two\[cq]s Complement
In two\[cq]s complement, positive numbers are standard binary:
.IP \[bu] 2
\f[CR]0000\f[R]: \f[CR]0\f[R]
.IP \[bu] 2
\f[CR]0001\f[R]: \f[CR]1\f[R]
.IP \[bu] 2
\f[CR]0010\f[R]: \f[CR]2\f[R]
.PP
And negative numbers swap the roles of \f[CR]0\f[R] and \f[CR]1\f[R] and
start from \f[CR]\-1\f[R] at \f[CR]1111\f[R], so:
.IP \[bu] 2
\f[CR]1111\f[R]: \f[CR]\-1\f[R]
.IP \[bu] 2
\f[CR]1110\f[R]: \f[CR]\-2\f[R]
.IP \[bu] 2
\f[CR]1101\f[R]: \f[CR]\-3\f[R]
.SH Useful Operations
.IP \[bu] 2
\f[CR]0\f[R]: All zeros (of course).
.IP \[bu] 2
\f[CR]\[ti]0\f[R]: All ones.
.IP \[bu] 2
\f[CR]\[ti]0 << n\f[R]: All ones except the right\-most \f[CR]n\f[R]
bits.
.IP \[bu] 2
\f[CR]\[ti](\[ti]0 << n)\f[R]: All zeros except the right\-most
\f[CR]n\f[R] bits.
.IP \[bu] 2
\f[CR]0b10101010101010101010101010101010\f[R]: The easiest way to write
a number with alternating ones and zeros.
.SS Tips
.IP \[bu] 2
Using \f[CR]\[ti]0 << n\f[R] or \f[CR]\[ti](\[ti]0 << n)\f[R] as bit
fields are an easy way to capture to right\- or left\-most bits.
.IP \[bu] 2
Use \f[CR]\[ti]0 << n\f[R] and \f[CR]\[ti](\[ti]0 << n)\f[R], then an
\f[CR]|\f[R], to get the left\- \f[I]and\f[R] right\- most bits.
.SH Printing
Functions for printing bits, it can be added to a header
(\f[CR]printbits.h\f[R]) and imported
(\f[CR]#include \[dq]printbits.h\[dq]\f[R]):
.IP
.EX
#include \f[B]<stdio.h>\f[R]

void printbits(size_t const size, void const *const ptr) {
    unsigned char *b = (unsigned char *)ptr;
    unsigned char byte;
    int i, j;

    \f[B]for\f[R] (i = size \- 1; i >= 0; i\-\-) {
        \f[B]for\f[R] (j = 7; j >= 0; j\-\-) {
            byte = (b[i] >> j) & 1;
            printf(\[dq]%u\[dq], byte);
        }
    }
    puts(\[dq]\[dq]);
}

void qpb(int x) {
    printbits(\f[B]sizeof\f[R](x), &x);
}
.EE
