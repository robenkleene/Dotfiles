.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_LANG_OPENGL Reference" "" "" ""
.PP
\f[CR]glUseProgram\f[R]
.SH Shaders
.SS Shader Source
.IP
.EX
const char *vertexShaderSource = \[dq]#version 330 core\[rs]n\[dq]
    \[dq]layout (location = 0) in vec3 aPos;\[rs]n\[dq]
    \[dq]void main()\[rs]n\[dq]
    \[dq]{\[rs]n\[dq]
    \[dq]   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\[rs]n\[dq]
    \[dq]}\[rs]0\[dq];
const char *fragmentShaderSource = \[dq]#version 330 core\[rs]n\[dq]
    \[dq]out vec4 FragColor;\[rs]n\[dq]
    \[dq]void main()\[rs]n\[dq]
    \[dq]{\[rs]n\[dq]
    \[dq]   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\[rs]n\[dq]
    \[dq]}\[rs]n\[rs]0\[dq];
.EE
.SS Passing Data to a Vertex Shader
.IP
.EX
float vertices[] = {
    \-0.5f, \-0.5f, 0.0f, \f[I]// left  \f[R]
    0.5f, \-0.5f, 0.0f, \f[I]// right \f[R]
    0.0f,  0.5f, 0.0f  \f[I]// top   \f[R]
}; 
\f[I]// 0. copy our vertices array in a buffer for OpenGL to use\f[R]
glBindBuffer(GL_ARRAY_BUFFER, VBO);
glBufferData(GL_ARRAY_BUFFER, \f[B]sizeof\f[R](vertices), vertices, GL_STATIC_DRAW);
\f[I]// 1. then set the vertex attributes pointers\f[R]
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * \f[B]sizeof\f[R](float), (void*)0);
glEnableVertexAttribArray(0);  
\f[I]// 2. use our shader program when we want to render an object\f[R]
glUseProgram(shaderProgram);
\f[I]// 3. now draw the object \f[R]
someOpenGLFunctionThatDrawsOurTriangle();
.EE
.SS Compiling a Shader
.IP
.EX
unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
glCompileShader(vertexShader);
.EE
.SH Shader Program
A linked version of multiple shaders combined.
.SS Creating a shader program
.IP
.EX
unsigned int shaderProgram;
shaderProgram = glCreateProgram();
.EE
.SS Attaching shaders to a shader program
.IP
.EX
glAttachShader(shaderProgram, vertexShader);
glAttachShader(shaderProgram, fragmentShader);
.EE
