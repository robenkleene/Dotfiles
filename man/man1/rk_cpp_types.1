.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_CPP_TYPES Reference" "" "" ""
.SH \f[CR]struct\f[R] vs \f[CR]class\f[R]
.IP \[bu] 2
The only difference between a \f[CR]struct\f[R] and a \f[CR]class\f[R]
is that a \f[CR]struct\f[R] is \f[CR]public\f[R] by default, and a class
is \f[CR]private\f[R] by default
.IP \[bu] 2
\f[CR]explicit\f[R] is used to prevent implicit conversion (e.g., it can
be used to prevent an \f[CR]int foo\f[R] from being implicitly converted
to an \f[CR]enum bar\f[R], for example in a \f[CR]struct\f[R]
constructor that takes an \f[CR]enum\f[R] as a parameter)
.IP \[bu] 2
Slicing also happens if you assign a derived class to a variable
declared as a base class.
.IP \[bu] 2
To avoid slicing, return a pointer or a reference instead of a value
.SH Initialization
.IP \[bu] 2
Primitive types are not initialized by default in C++, behavior is
undefined if they are accessed before assigning a value.
This is true both for inline variables and member variables.
.SH Casting
.IP
.EX
\f[B]if\f[R] (\f[B]dynamic_cast\f[R]<foo*>(bar) != NULL) {
  std::cout << \[dq]&bar = %p\[dq] << &bar << std::endl;
}
.EE
