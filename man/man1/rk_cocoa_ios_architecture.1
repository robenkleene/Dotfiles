.\" Automatically generated by Pandoc 3.6.3
.\"
.TH "RK_COCOA_IOS_ARCHITECTURE Reference" "" "" ""
.SH MVVM
.IP "1." 3
\f[B]Model:\f[R] Includes both the model and methods for fetching data
.IP "2." 3
\f[B]ViewModel:\f[R] Observable properties for what the view needs
.IP "3." 3
\f[B]View:\f[R]: View
.SH VIPER
VIPER flow
.IP "1." 3
\f[B]View:\f[R] Triggers the button click
.IP "2." 3
\f[B]Presenter:\f[R] Receives the click (delegation)
.IP "3." 3
\f[B]Interactor:\f[R] Performs business logic (e.g., fetch data)
.IP "4." 3
\f[B]Entity:\f[R] The data model (in the smallest, most \[lq]property
bag\[rq] sense)
.IP "5." 3
\f[B]Router:\f[R] Manage presenting screens
.SH Combine
Apple\[cq]s framework that provides a declarative Swift API for
processing values over time.
.IP \[bu] 2
\f[B]Publisher:\f[R] A type that can deliver a sequence of values over
time.
.IP \[bu] 2
\f[B]Subscriber:\f[R] Acts on elements as they are received.
.SS Example
.IP
.EX
\f[B]import\f[R] \f[B]Combine\f[R]
\f[B]let\f[R] usersPublisher = URLSession.shared.dataTaskPublisher(\f[B]for\f[R]: URL(string: \[dq]\[dq])!)
\f[B]let\f[R] namesPublisher = usersPublisher
    .map { $0.data }
    .decode(type: [User].\f[B]self\f[R], decoder: JSONDecoder())
    .map { $0.map { $0.name } }
namesPublisher
    .sink(receiveCompletion: { _ \f[B]in\f[R] },
          receiveValue: { [\f[B]weak\f[R] \f[B]self\f[R]] names \f[B]in\f[R]
            \f[B]self\f[R]?.tableView.reloadData(with: names)
          })
    .store(\f[B]in\f[R]: &cancellables)
.EE
.PP
For \f[CR]sink\f[R]:
.IP \[bu] 2
\f[B]Publisher:\f[R] The faucet (source of water)
.IP \[bu] 2
\f[B]Pipe:\f[R] The operators (transformations applied to the data)
.IP \[bu] 2
\f[B]Sink:\f[R] The drain (where the water ends up)
.PP
In the above example, the subscriber is the closure to handle the names,
and the publisher\[cq]s are the \f[CR]usersPublisher\f[R] (which gets
the raw data), and the \f[CR]namesPublisher\f[R] (which extracts the
names from the user\[cq]s publisher).
