.\" Automatically generated by Pandoc 3.5
.\"
.TH "RK_GEM_MANAGEMENT Reference" "" "" ""
.SH The Problem
If a Ruby script is run from the command\-line that has a shebang that
sets a different Ruby than the default Ruby, then this will cause an
inconsistency between the Ruby binary and the gem configuration.
.PP
Here\[cq]s an example of a shebang line that overrides the default Ruby:
.IP
.EX
#!/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/bin/ruby
.EE
.SH The Workaround
The work around is to use a \f[CR].ruby\-version\f[R] file to override
the current version of Ruby.
This should be done in any directory that has Ruby files with shebangs
that override the default ruby.
.SH System Ruby
Use system Ruby for Repla:
.IP
.EX
chruby system
.EE
.PP
When installing system gems, use \f[CR]\-\-user\-install\f[R] to avoid
cluttering the system Ruby space:
.PP
This installs gems at \f[CR]/Users/robenkleene/.gem/ruby/2.3.0\f[R].
(Note that this does not require \f[CR]sudo\f[R].)
.PP
Since the default executable path is not setup by default, bundler and
rake must specify it when being installed:
.IP
.EX
gem install \-\-user\-install bundler \-\-bindir /usr/local/bin
gem install \-\-user\-install rake \-\-bindir /usr/local/bin
.EE
.SS Restoring Default \f[CR]gems\f[R]
These are probably supposed to be installed by default, if they get
deleted, use these commands to restore them to
\f[CR]/Library/Ruby/Gems/2.3.0/\f[R]
.IP
.EX
sudo gem install test\-unit
sudo gem install power_assert
.EE
.SH Correct Installation
Here\[cq]s how Bundler should work after being correctly installed:
.IP
.EX
$ which bundle
/Users/robenkleene/.gem/ruby/2.5.3/bin/bundle
$ chruby system
$ which bundle
/usr/local/bin/bundle
.EE
.PP
Note that for system Ruby, the gem directory is \f[CR]2.3.0\f[R] (not
\f[CR]2.3.7\f[R]):
.IP
.EX
$ ls .gem/ruby
2.3.0  2.5.3
.EE
