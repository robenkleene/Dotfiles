.\" Automatically generated by Pandoc 3.4
.\"
.TH "RK_FISH_SCRIPTING Reference" "" "" ""
.SH Variables
By default, a multi\-line variable will be turned into a list.
This means, this sequence will print out the output without the new
lines (since when a list is printed, it uses spaces instead of new
lines):
.IP
.EX
set build_output (pbpaste)
echo $build_output
.EE
.PP
This will create a single variable with new lines that prints correctly:
.IP
.EX
set build_output \[dq]$(pbpaste)\[dq]
.EE
.PP
Alternatively, the list can be printed with new lines using
\f[CR]printf\f[R]:
.IP
.EX
printf \[dq]%s\[rs]n\[dq] $build_output
.EE
.SH String Interpolation
Use \f[CR]$(<command>)\f[R] to make a subshell within a string:
.IP
.EX
mkdir \[dq]$(today) nvim\[dq]
.EE
.SH Quoting
Numeric values don\[cq]t need to be quoted:
.IP
.EX
if test $status \-eq 0
    echo \-n (basename $git_path)
end
.EE
.SH Parameter Expansion
Parameter expansion is the act of expanding special characters in
parameters, for example globbbing.
Parameter expansion does \f[I]not\f[R] happen in quotes.
.IP
.EX
echo *.sh # a_file.sh
echo \[dq]*.sh\[dq] # *.sh
.EE
