.\" Automatically generated by Pandoc 3.4
.\"
.TH "VIM_SHELL_COMMANDS Reference" "" "" ""
.IP \[bu] 2
\f[CR]!\f[R]: Run shell command on visual selection (i.e., shortcut for
\f[CR]:!\f[R])
.IP \[bu] 2
\f[CR]!!\f[R]: Run shell command on current line (i.e., shortcut for
\f[CR]:.!\f[R])
.SH Output in Echo Area
Note that the space after \f[CR]w\f[R] is mandatory!
.IP \[bu] 2
\f[CR]:.w !bash\f[R]: Current line
.IP \[bu] 2
\f[CR]:w !bash\f[R]: File
.IP \[bu] 2
\f[CR]:%w !bash\f[R]: File
.IP \[bu] 2
\f[CR]:\[aq]<,\[aq]>w !bash\f[R]: Visual selection (note this only works
for \f[I]line\-wise\f[R] selection, sub\-line selection will not work!
This is because \f[CR]:\f[R] \f[CR]ex\f[R] commands are all line based)
.SH Replacing Selection
.IP \[bu] 2
\f[CR]:\[aq]<,\[aq]>!sort\f[R]: Pipe visual selection through sort
.IP \[bu] 2
\f[CR]:%!sort\f[R]: Pipe file through sort
.IP \[bu] 2
\f[CR]!}\f[R]: Filter to the end of the current block through shell
command (here \f[CR]}\f[R] is just used as the \f[CR]vim\f[R] motion to
the end of the block)
.SH Appending Output to Current Buffer
The space after \f[CR]:r\f[R] is not mandatory
.IP \[bu] 2
\f[CR]:r !ls\f[R]: Input the result of a shell command below the current
line
.IP \[bu] 2
\f[CR]:0r !ls\f[R]: Input the result of a shell command at the beginning
of the document
.IP \[bu] 2
These don\[cq]t work with interactive commands (their output is written
to a temporary buffer)
.SH Insert Mode
.IP \[bu] 2
Use the expression register and \f[CR]system()\f[R] to insert the result
of a shell command (e.g., \f[CR]<C\-r>=system(\[aq]pbpaste\[aq])\f[R])
.SH Output in a New Buffer
There\[cq]s no nice way to do this, it\[cq]s easier to just create a new
buffer (\f[CR]:new\f[R]) paste the current document if you need it then
run the command
.IP \[bu] 2
\f[CR]vnew | 0r !git blame #\f[R]: Trick to get blame output
side\-by\-side with command
.SH Special Characters
.IP \[bu] 2
\f[CR]!\f[R] always represents the previous shell command, unless
it\[cq]s preceded by a \f[CR]\[rs]\f[R].
For example, \f[CR]:!echo ! \[rs]! \[rs]\[rs]!\f[R] after
\f[CR]:!ls\f[R] executs \f[CR]echo ls ! \[rs]!\f[R]
.IP \[bu] 2
\f[CR]|\f[R] can normally be used to execute multiple commands on the
command line, but not after a shell command, because with a shell
command \f[CR]|\f[R] is used to pipe
.IP \[bu] 2
There are two methods to execute another command\-line command after a
shell command, either use \f[CR]exe[cute]\f[R] (e.g.,
\f[CR]:execute \[aq]r !ls\[aq] | \[aq][\f[R] or insert a
\f[CR]\[ha]\[at]\f[R] with \f[CR]<C\-v><C\-j>\f[R] (note that after
\f[I]a subsequent pipe\f[R] then needs to be escaped with
\f[CR]\[rs]|\f[R]*)
.SH Special
.IP \[bu] 2
\f[CR]!clear\f[R]: Clear the external command buffer
.IP \[bu] 2
\f[CR]!!bash\f[R]: Execute current line in bash (note that this is a
normal mode command, not a command line command)
.IP \[bu] 2
\f[CR]:!%\f[R]: Run current file
.SH Parameter Expansion
\f[CR]:h backtick\-expantion\f[R]
.IP \[bu] 2
\[lq]:e \f[CR]today\f[R].md\[rq]: Works well
.IP \[bu] 2
Backtick expansion often causes errors, for example \[lq]:Explore
\f[CR]git root\f[R]\[rq] doesn\[cq]t work.
A workaround is to use tab expansion to expand the backtick quote
portion (e.g., \[lq]:Explore \f[CR]git root\f[R]\[rq] will expand to the
result of \f[CR]git root\f[R]).
.SS Gotchas
.IP \[bu] 2
Doesn\[cq]t work with Fish shell
.IP \[bu] 2
Doesn\[cq]t work with interactive programs, it hangs (e.g., \[lq]e
\f[CR]which z_fzf\f[R]\[rq] won\[cq]t work
.SH Pipes
.IP \[bu] 2
Pipes can be used normally with \f[CR]:!\f[R], e.g.,
\f[CR]:!realpath % | pbcopy\f[R] works
.SS Examples
Trim shell output of a prefix:
.IP \[bu] 2
\f[CR]!tmux saveb \- | sed \[aq]s\[rs]#foo\[rs]#\[rs]#\[aq]\f[R]
