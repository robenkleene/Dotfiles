.\" Automatically generated by Pandoc 3.5
.\"
.TH "RK_CPP_COMPILING Reference" "" "" ""
.IP \[bu] 2
\f[CR]clang++ foo.cpp\f[R]: Compile file to \f[CR]a.out\f[R]
.SH Versions
.IP \[bu] 2
Specify a version with the \f[CR]\-\-std=c++20\f[R] flag
.SS Compile Flags
Add a \f[CR]compile_flags.txt\f[R] file to the project directory with
\f[CR]\-std=c++20\f[R] as the contents.
.IP \[bu] 2
Note that this only works for language servers, e.g., \f[CR]clang++\f[R]
will still need the flag added manually like
\f[CR]clang++ \-\-std=c++20\f[R]
.IP \[bu] 2
Note that this will also get picked up and cause issues with other
source code files in the same directory, e.g., the \f[CR]sourcekit\f[R]
LSP for Swift will attempt to use a \f[CR]\-std=c++20\f[R] flag and
fail.
.SH On macOS
The \f[CR]clang++\f[R] installed by Xcode uses \f[CR]C++98\f[R] by
default.
.SH Determining Default C++ Version
Run \f[CR]clang++ \-dM \-E \-x c++ /dev/null | grep __cplusplus\f[R],
results in output like:
.IP
.EX
#define __cplusplus 201402L
.EE
.PP
This corresponds to \f[CR]C++14\f[R], because 2014 means standardized in
2014.
