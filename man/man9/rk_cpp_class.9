.\" Automatically generated by Pandoc 3.4
.\"
.TH "RK_CPP_CLASS Reference" "" "" ""
.IP \[bu] 2
Functions marked \f[CR]static\f[R] don\[cq]t rely on instance\-specific
member variables or method (i.e., class method vs.\ instance method)
.SH Constructors
In this case \f[CR]foo\f[R] will be set to an instance of the class
calling the default constructor:
.IP
.EX
\f[B]class\f[R] Foo { }
int main() {
  Foo foo;
}
.EE
.SS Base initializers
Constructors can take base initializers:
.IP
.EX
\f[B]class\f[R] Foo {
\f[B]public\f[R]:
    Foo(int barIn) : bar(barIn) { }
\f[B]private\f[R]:
    int bar;
};
.EE
.SH Destructors
Including a default destructor ensures that deleting a class through a
base class pointer, also calls derived class destructors:
.IP
.EX
  \f[B]virtual\f[R] \[ti]Foo() = \f[B]default\f[R];
.EE
.SH \f[CR]virtual\f[R] & \f[CR]override\f[R]
.IP \[bu] 2
When a function is specified as \f[CR]virtual\f[R] and another function
uses \f[CR]override\f[R], if the \f[CR]virtual\f[R] function returns a
base type and the \f[CR]override\f[R] function returns a derived type
then the derived type will be \[lq]sliced\[rq] on return, removing the
\f[CR]derived\f[R] information from the base type.
.SH Lifetimes
.SS Dangling Pointer
A dangling pointer is when a pointer references an instance of an object
that has already been freed.
.PP
When a function on a class is called from a dangling pointer, \f[I]will
actually run\f[R], because the function is resolved statically at
compile time, the dangling pointer crash will only happen once a member
variable is accessed, because that\[cq]s what requires accessing the
freed memory.
.PP
The exception to this is virtual functions, virtual functions have to be
determined at runtime, because with a virtual object the type of an
object is not known at compile time.
So with virtual functions, a pointer to the \[lq]V\-table\[rq] (virtual
table) is accessed off of the instance.
Since the instance will be a freed object, the crash will happen when
running the function in the case of a virtual function (because the
pointer state will be accessed to try to get a reference to the
V\-table).
.SH Casting
Run\-Time Type Information (RTTI) is the name of the C++ feature.
.PP
\f[CR]dynamic_cast\f[R]
.IP
.EX
Base* b = \f[B]new\f[R] Derived();
Derived* d = \f[B]dynamic_cast\f[R]<Derived*>(b);
.EE
