.\" Automatically generated by Pandoc 3.4
.\"
.TH "RK_PROCESSING_PRINT Reference" "" "" ""
.PP
\f[CR]println\f[R] prints with a new line at the end:
.IP
.EX
println(\[dq]value = \[dq], value);
.EE
.PP
\f[CR]print\f[R] does not print a new line:
.IP
.EX
print(\[dq]value = \[dq], value, \[dq]\[rs]n\[dq]);
.EE
.SS Array
\f[CR]printArray\f[R] is used to print arrays:
.IP
.EX
println(\[dq]arr\[dq]);
printArray(arr);
print(\[dq]\[rs]n\[dq]);
.EE
.SS Box
Print vertices coordinates.
.IP
.EX

void draw() {
  box(cubeSize);
  printBoxVertices(cubeSize);
}

void printBoxVertices(float size) {
  float hs = size / 2.0;

  PVector[] vertices = \f[B]new\f[R] PVector[8];
  vertices[0] = \f[B]new\f[R] PVector(\-hs, \-hs, \-hs);
  vertices[1] = \f[B]new\f[R] PVector( hs, \-hs, \-hs);
  vertices[2] = \f[B]new\f[R] PVector( hs,  hs, \-hs);
  vertices[3] = \f[B]new\f[R] PVector(\-hs,  hs, \-hs);
  vertices[4] = \f[B]new\f[R] PVector(\-hs, \-hs,  hs);
  vertices[5] = \f[B]new\f[R] PVector( hs, \-hs,  hs);
  vertices[6] = \f[B]new\f[R] PVector( hs,  hs,  hs);
  vertices[7] = \f[B]new\f[R] PVector(\-hs,  hs,  hs);

  \f[B]for\f[R] (int i = 0; i < vertices.length; i++) {
    PVector v = vertices[i];
    float tx = modelX(v.x, v.y, v.z);
    float ty = modelY(v.x, v.y, v.z);
    float tz = modelZ(v.x, v.y, v.z);
    println(\[dq]Vertex \[dq] + i + \[dq]: (\[dq] + tx + \[dq], \[dq] + ty + \[dq], \[dq] + tz + \[dq])\[dq]);
  }
}
.EE
