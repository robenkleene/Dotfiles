{
  "Print variable": {
    "prefix": "rk_pv",
    "body": "print(\"$1 =\", ${1:result})",
    "description": "Print variable"
  },
  "Print": {
    "prefix": "rk_p",
    "body": "print(\"${1:Message}\")",
    "description": "Print"
  },
  "Swift template": {
    "prefix": "rk_template",
    "body": "#!/usr/bin/swift\n\n$0",
    "description": "Swift template"
  },
  "Delegate": {
    "prefix": "rk_delegate",
    "body": "protocol ${1:MyClass}Delegate {\n    func ${2:handleEvent}(for: $1})\n    func ${1/.*/\\l$0/}(_  ${1/.*/\\l$0/}: $1, ${3:valueForKey} ${4:key}: ${5:String}) -> ${6:Any}\n}",
    "description": "Delegate"
  },
  "Weak self strong self": {
    "prefix": "rk_guard_weak_self",
    "body": "guard let \\`self\\` = self else { return }",
    "description": "Weak self, strong self guard statement"
  },
  "Protocol": {
    "prefix": "rk_protocol",
    "body": "protocol ${1:MyType} {\n    $0\n}",
    "description": "Protocol"
  },
  "Log variable": {
    "prefix": "rk_log_var",
    "body": "NSLog(\"$1 = \\(${1:result})\")",
    "description": "Log variable"
  },
  "Log": {
    "prefix": "rk_log",
    "body": "NSLog(\"${1:Hello World}\")",
    "description": "Print"
  },
  "Print string": {
    "prefix": "rk_print",
    "body": "print(\"${1:Hello World}\")",
    "description": "Print"
  },
  "Print optional variable": {
    "prefix": "rk_print_var_opt",
    "body": "print(\"$1 =\", ${1:result} ?? \"nil\"",
    "description": "Print optional variable"
  },
  "For": {
    "prefix": "rk_for",
    "body": "for ${1:i} in ${2:0}..<${3:10} {\n    ${0:print(\"\\($1)\")}\n}",
    "description": "For loop"
  },
  "Class": {
    "prefix": "rk_class",
    "body": "class ${1:MyObject} {\n    $0\n}",
    "description": "Class"
  },
  "Expectation": {
    "prefix": "rk_expectation",
    "body": "let ${1:expect} = expectation(description: \"${2:Expectation}\")\n$1.fulfill()\nwaitForExpectations(timeout: ${3:1.0}, handler: nil)",
    "description": "Expectation"
  },
  "`do-catch`": {
    "prefix": "rk_do_catch",
    "body": "do {\n    ${1:${VISUAL:try someThrowingFunction()/try!/try/g}}\n} catch {\n    ${2:throw error}\n}",
    "description": "`do-catch` statement"
  }
}
