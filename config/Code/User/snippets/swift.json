{
  "class": {
    "body": "class ${1:MyObject} {\n    $0\n}",
    "description": "class",
    "prefix": "rk_class"
  },
  "delegate": {
    "body": "protocol ${1:MyClass}Delegate {\n    func ${2:handleEvent}(for: $1})\n    func ${1/.*/\\l$0/}(_  ${1/.*/\\l$0/}: $1, ${3:valueForKey} ${4:key}: ${5:String}) -> ${6:Any}\n}",
    "description": "delegate",
    "prefix": "rk_delegate"
  },
  "do catch": {
    "body": "do {\n    ${1:${VISUAL:try someThrowingFunction()/try!/try/g}}\n} catch {\n    ${2:throw error}\n}",
    "description": "do catch",
    "prefix": "rk_do_catch"
  },
  "expectation": {
    "body": "let ${1:expect} = expectation(description: \"${2:Expectation}\")\n$1.fulfill()\nwaitForExpectations(timeout: ${3:1.0}, handler: nil)",
    "description": "expectation",
    "prefix": "rk_expectation"
  },
  "for": {
    "body": "for ${1:i} in ${2:0}..<${3:10} {\n    ${0:print(\"\\($1)\")}\n}",
    "description": "For",
    "prefix": "rk_for"
  },
  "guard weak strong self": {
    "body": "guard let \\`self\\` = self else { return }",
    "description": "guard weak strong self",
    "prefix": "rk_guard_weak_self"
  },
  "log": {
    "body": "NSLog(\"${1:Hello World}\")",
    "description": "log",
    "prefix": "rk_log"
  },
  "log var": {
    "body": "NSLog(\"$1 = \\(${1:result})\")",
    "description": "log var",
    "prefix": "rk_log_var"
  },
  "print": {
    "body": "print(\"$1\")",
    "description": "print",
    "prefix": [
      "rk_p",
      "rk_print"
    ]
  },
  "print var": {
    "body": "print(\"$1 =\", ${1})",
    "description": "print var",
    "prefix": [
      "rk_pv",
      "rk_print_var"
    ]
  },
  "print var optional": {
    "body": "print(\"$1 =\", ${1} ?? \"nil\"",
    "description": "print var optional",
    "prefix": "rk_print_var_opt"
  },
  "protocol": {
    "body": "protocol ${1:MyType} {\n    $0\n}",
    "description": "protocol",
    "prefix": "rk_protocol"
  },
  "template": {
    "body": "#!/usr/bin/swift\n\n$0",
    "description": "template",
    "prefix": "rk_template"
  }
}
