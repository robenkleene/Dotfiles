{
  "Print variable": {
    "scope": "javascript,typescript",
    "prefix": "rk_pv",
    "body": "console.log(\"$1 = \" + ${1:result});",
    "description": "Print variable"
  },
  "Print": {
    "scope": "javascript,typescript",
    "prefix": "rk_p",
    "body": "console.log(\"${1:Message}\");",
    "description": "Print variable"
  },
  "JavaScript template": {
    "scope": "javascript,typescript",
    "prefix": "rk_template",
    "body": "#!/usr/bin/env node\n\n",
    "description": "JavaScript template"
  },
  "Log variable": {
    "scope": "javascript,typescript",
    "prefix": "rk_log_var",
    "body": "console.log(\"$1 = \" + ${1:result});",
    "description": "Log variable"
  },
  "For loop": {
    "scope": "javascript,typescript",
    "prefix": "rk_for",
    "body": "for (let ${1:i} = 0; $1 < ${2:10}; $1++) {\n  $0\n}",
    "description": "For loop"
  },
  "Max JavaScript post variable": {
    "prefix": "rk_max_post_var",
    "body": "post(\"$1 = \" + ${1:result} + \"\\n\");",
    "description": "Max JavaScript post variable"
  },
  "Max JavaScript template": {
    "prefix": "rk_max_template",
    "body": [
      "// Re-compile the file automatically when it changes",
      "autowatch = 1;",
      "",
      "// Inlets & Outlets",
      "inlets = 3;",
      "outlets = 3;",
      "",
      "// Store input",
      "var values = [0, 0, 0];",
      "",
      "// `inlet` property reports the inlet number",
      "",
      "// `msg_int()` is called when an int is received",
      "function msg_int(value) {",
      "  values[inlet] = value;",
      "  outlet(inlet, \"int \" + value);",
      "}",
      "",
      "// `msg_float()` is called when a float is received",
      "function msg_float(value) {",
      "  values[inlet] = value;",
      "  outlet(inlet, \"float \" + value);",
      "}",
      "",
      "// `bang()` is called when a bang is received",
      "function bang() {",
      "  // The string `\"bang\"` sends a bang out the outlet",
      "  outlet(inlet, \"bang\");",
      "}",
      "",
      "// `list()` is called when a message starts with `list`",
      "// Only messages that beginning with a number (e.g., `1, b, 3, d`) will call",
      "// `list` (otherwise `anything` will be called).",
      "function list(value) {",
      "  // `value` is only the first argument",
      "  // If the first parameter is a symbol, then it's treated as a function name",
      "  post(\"value = \" + value);",
      "  // If the input is all numbers, `messagename` is `list`",
      "  post(\"messagename = \" + messagename);",
      "  process_arguments(inlet, messagename, arguments, \"list\");",
      "}",
      "",
      "// `anything()` is called when there's no function match",
      "function anything(value) {",
      "  // `value` is only the first argument",
      "  post(\"value = \" + value);",
      "  // If input starts `messagename` is the first symbol in a list",
      "  // E.g., if `a b c` is passed in, it's `a`",
      "  post(\"messagename = \" + messagename);",
      "  process_arguments(inlet, messagename, arguments, \"anything\");",
      "}",
      "",
      "function process_arguments(inlet, firstElement, arguments, prefix) {",
      "  // In a called function, `messagename` is the name of the function that called this one (e.g., `anything` or `list`)",
      "  // The `arguments` property can be numerically indexed like an `Array` but is not an instance of `Array`.",
      "  // `arrayfromargs` converts to an actual array",
      "  var arr = arrayfromargs(firstElement, arguments);",
      "  outlet(inlet, prefix + \" \" + arr.join());",
      "}",
      "",
      "function log(obj) {",
      "  // `post` logs to console",
      "  post(JSON.stringify(obj));",
      "}",
      ""
    ],
    "description": "Max JavaScript template"
  }
}
