set-option -g mode-keys vi

unbind C-b
set-option -g prefix M-o
# Send prefix on second prefix
bind M-o send-prefix
# Bind the command originally on the prefix key to old prefix
# For `rotate-window -D`, there are several bindings that do something similar, `M-{` / `M-}` or `C-o`
bind C-b rotate-window -D

# Use the current directory
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Don't require confirmation when killing a pane
bind-key -T prefix x kill-pane

# Allow `Space` for `next-layout` to be repeated
# These are hard to leverage the repeat anyway because the delay is too short
# bind-key -r Space next-layout

# Move panes
# These don't have default bindings
# This mirrors the way, e.g., `CTRL-W_L` will move the window to the right in Vim
bind-key N swap-window -d -t :+1
bind-key P swap-window -d -t :-1

# Focus Pane
# These intefere when quickly switching to another pane and hitting up arrow to re-run the last command
# Allow select-pane in the opposite direction
# bind-key -r O select-pane -t :.-
# Make the default binding repeatable
# bind-key -r o select-pane -t :.+

# Allow next / previous window to be repeated
# These interfere when going to the next window then using up arrow to run the previous command
# bind-key -r n next-window
# bind-key -r p previous-window

bind-key M-m set -g mouse \; display "Mouse toggled"

# Without a prefix, only select the pane (don't also send mouse)
# Avoid this because it doesn't really work effectively because internal to
# applications, usually a single mouse click also moves the cursor. E.g.,
# clicking into a split in Emacs or Vim, will both focus the split and move the
# cursor to that location.
# bind-key -n MouseDown1Pane if-shell -Ft= '#{pane_active}' {
#     send-keys -M
# } {
#     select-pane -t =
# }

bind-key ` display-popup -E "tmux new-session -A -s popup"

# Remove line endings when pasting
bind-key ] paste-buffer -p
# Also replace new lines with spaces
# bind-key ] paste-buffer -p -s' '

# Copy Mode

# Entering

# There are four main actions to enter copy mode:
# - Move up one line (`k`)
# - Page up (`C-b`)
# - Search backward (`?`)
# - Click somewhere
# We don't want to have to bind all of these, so instead bind none of them

# Allow prefix then mouse down to place the cursor
# bind-key MouseDown1Pane if-shell -Ft= '#{pane_active}' {
#     copy-mode -M
#     send -X clear-selection
# } {
#     select-pane -t =
#     copy-mode -M
#     send -X clear-selection
# }

# Use `<prefix>k` to enter copy mode and move one line up
# This makes it a lot easier to copy part of the output of the most recent command
# This has no default binding
# bind-key k copy-mode \; send-keys -X cursor-up

# Use `?` to enter copy mode and start a backwards search
# This is bound to show `list-keys -N` (the `-N` means only show `prefix` and
# `root` bindings) (`<prefix>list-keys` is more practical for checking `tmux`
# bindings).)
# bind-key ? copy-mode \; command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" { send-keys -X search-backward-incremental "%%" }

# Mouse

# Allow clicking in copy mode to move the cursor
bind-key -T copy-mode MouseDown1Pane select-pane \; send -X clear-selection \; send-keys -M
bind-key -T copy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection \; send-keys -M

# Emacs

# Backspace should be able to page up in Emacs mode (just like readonly buffers can in Emacs)
bind-key -T copy-mode BSpace send-keys -X page-up
# bind-key -T copy-mode Enter send-keys -X copy-pipe-and-cancel
# Allow `M-w` to copy without exiting copy mode
bind-key -T copy-mode M-w send-keys -X copy-pipe

# Vi

# Allow `y` to copy without exiting copy mode (`y` has no default binding, use enter to copy and cancel)
bind-key -T copy-mode-vi y send-keys -X copy-pipe
# Use `Y` to copy the current line without the new line (`Y` has no default binding)
# bind-key -T copy-mode-vi Y send-keys -X copy-line-and-cancel
bind-key -T copy-mode-vi Y send-keys -X start-of-line \; send-keys -X begin-selection \; send-keys -X end-of-line \; send-keys -X cursor-left \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel
# Use `D` to copy to the end of the line, wihtout the new line (`D` by default includes the new line, and doesn't exit `copy-mode`)
# This is particularly useful for grabbing file names from, e.g., `git status`
bind-key -T copy-mode-vi D send-keys -X begin-selection \; send-keys -X end-of-line \; send-keys -X cursor-left \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel

# Make search incremental
bind-key -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" { send-keys -X search-backward-incremental "%%" }
bind-key -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" { send-keys -X search-forward-incremental "%%" }
