# Settings

# Fix colors
# With `screen-256color`, underline is broken in Emacs
set -g default-terminal "xterm-256color"
set -g terminal-overrides "xterm*:Tc:khome=\033[1~:kend=\033[4~"

# Handled by sensible
# set -g default-terminal "screen-256color"

# Send shift arrow keys (`vim-tmux-navigator` won't work without this)
set-option -g xterm-keys on

# Increase scrollback lines
# Handled by sensible
set -g history-limit 1000000

# Remove delay
# Also handled by sensible
# Setting this too low conflicts with use `<Esc>` as a replacement for the meta
# key
set -s escape-time 10

# Don't enforce size of smallest window
# Handled by sensible
# setw -g aggressive-resize on

# Required for `vim-tmux-clipboard`
set -g focus-events on

# With this setting on, if two terminals are accessing different windows in the
# two different sessions in the same session group, they'll have independent
# sizes. With it off, the session always has one size for all windows.
set -g aggressive-resize on

# At some point tmux started renaming windows based on process after every 
# command, even if it had already been renamed. This makes manual names stick.
# set-option -g allow-rename off

# Make `_` and `-` part of words for double-clicking to select a word
set-option -g word-separators " @()[]{}:.,!;'\"<>/\\^$&+~?*"
# set-option -g word-separators " "

# UI

# Remove administrative debris (session name, hostname, time) in status bar
set -g status-right ''
# Increase the max length of the left status
set -g status-left-length 40

# Auto-renumber windows
# (Removes gaps between window numbers)
set-option -g renumber-windows on

# Go to another session after closing the last window instead of exiting
set-option -g detach-on-destroy off

# Show window activity
# Current disabled because Neovim is constantly showing output
# set -g visual-activity on
# setw -g monitor-activity on

# Colors
# Available Colors
# black, red, green, yellow, blue, magenta, cyan, white
# And (colortest.pl):
# colour0-colour255

# Status
set -g status-style bg=colour239,fg=colour249

# Active window
setw -g window-status-current-style fg=brightwhite,bold
setw -g window-status-activity-style fg=green
# Messages
set -g message-style bg=default,fg=brightwhite
# Panes
set -g pane-border-style fg=colour239,bg=colour239
set -g pane-active-border-style fg=colour244,bg=colour244
# Search
set -g copy-mode-match-style bg=colour54,fg=brightwhite
set -g copy-mode-current-match-style bg=colour91,fg=brightwhite

set-window-option -g window-active-style bg=terminal
set-window-option -g window-style bg=colour236

# Selection
# The selection color is a hex approximation of the color used for an
# active search in Vim. This is to differentiate for example between shell
# contents with a highlighted search from `rg` and the active `tmux` search or
# selection.
set -g mode-style bg=colour91,fg=brightwhite

# set -g status-right '#{?client_prefix,#[reverse]Prefix#[noreverse],}'
set -g status-right '#{?client_prefix,#[fg=brightwhite]#[bg=colour91]-- PREFIX --,}'

set-option -g status-interval 1
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# Bindings

# Prefix, this is important because C-b is page up in Vim
unbind C-b
set-option -g prefix M-s
# In Mosh, sometimes this key is sent for `M-s`
set-option -g prefix2 ß

# Equal size panes
bind-key = select-layout even-vertical

bind-key % split-window -h -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -c "#{pane_current_path}"
bind-key t new-window -a -c "#{pane_current_path}"
bind-key M-n next-window
bind-key M-p previous-window
bind-key T break-pane
bind-key c kill-pane
bind-key M-c confirm-before kill-window
bind-key o "kill-pane -a"
bind-key q kill-window
bind-key M-q kill-window
bind-key Q confirm-before kill-session
bind-key Space resize-pane -Z

bind-key B list-keys
# bind-key M-s choose-tree -s
bind-key M-a choose-tree -s
bind-key a choose-tree -s
# `M-S` doesn't work over `ssh` from iPad
# Mmemonic for this is `M-s M-x`, which is the invert of `C-x C-s` which is
# save in Emacs (a stretch I know...)
bind -n End send-key C-e
bind -n Home send-key C-a

# For some reason adding the `-b` flag makes these not freeze
bind-key z run-shell -b 'tmux_switch'
bind-key M-z run-shell -b 'tmux_switch_window'

# Swap window
bind-key > command-prompt "run-shell 'tmux-insert-window %%'"

# Move
bind-key N swap-window -d -t :+1
bind-key P swap-window -d -t :-1

bind-key C-p paste-buffer

# New Session
bind-key + new
bind-key A new
bind-key M-A new
bind-key M-t new
# This conflicts with using ESC to cancel
# bind-key Escape run-shell 'tmux_shell_new'
bind-key Tab run-shell 'tmux_shell_new'
bind-key ` run-shell 'tmux_shell_new'
bind-key M-` run-shell 'tmux_shell_new'
# This is an error on startup
# bind-key C-` run-shell 'tmux_shell_new'
# bind-key C-@ run-shell 'tmux_shell_new'

bind-key C-^ switch-client -l
bind-key ^ last-window
# Bind BS and C-BS
bind-key M-BSpace switch-client -l
bind-key BSpace last-window

# Init
bind-key i source-file ~/.tmux.conf \; display "Sourced"

# Next Pane
bind-key M-s select-pane -t :.+
bind-key M-S select-pane -t :.-
bind-key S select-pane -t :.-
bind-key C-w select-pane -t :.+
bind-key w select-pane -t :.+
bind-key W select-pane -t :.-
bind-key M-w select-pane -t :.+

# Synchronize
bind-key m set -g mouse \; display "Mouse toggled"
bind-key M set-window-option synchronize-panes \; display "Synchronize toggled"

# Movement
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key M-h select-pane -L
bind-key M-j select-pane -D
bind-key M-k select-pane -U
bind-key M-l select-pane -R

# Resize
# bind-key -r H resize-pane -L 5
# bind-key -r J resize-pane -D 5
# bind-key -r K resize-pane -U 5
# bind-key -r L resize-pane -R 5

# Vim Style Editing Keys
setw -g mode-keys vi

# Copy Mode
## vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi Space send-keys -X page-down
# bind-key -T copy-mode-vi Escape send-keys -X cancel
# Make search incremental
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode-vi-g _ send-keys -X end-of-line \; send-keys -X cursor-left
bind-key -T copy-mode-vi g switch-client -T copy-mode-vi-g

bind-key / copy-mode \; command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""

bind-key U copy-mode \; send -X search-backward " " \; \
	send-key -X search-again

# `rectangle-on` `rectangle-off` clears the search highlighting
bind-key u copy-mode \; send -X search-backward " " \; \
	send-key -X search-again \; \
	send-key -X cursor-down \; \
	send-key -X select-line \; \
	send -X search-forward " " \; \
	send-key -X cursor-up \; \
	send-key -X rectangle-on \; \
	send-key -X rectangle-off \; \
	run-shell -d 0.1 \; \
	send-key -X copy-pipe-and-cancel "safecopy"
bind-key e copy-mode \; send -X search-backward " " \; \
	send-key -X search-again \; \
	send-key -X cursor-down \; \
	send-key -X select-line \; \
	send -X search-forward " " \; \
	send-key -X cursor-up \; \
	run-shell -d 0.2 \; \
	send-key -X copy-pipe-and-cancel "safecopy" \; \
	send-key "C-v"
bind-key -T copy-mode-vi u send -X search-backward " " \; \
	send-key -X cursor-down \; \
	send-key -X select-line \; \
	send -X search-forward " " \; \
	send-key -X cursor-up \; \
	send-key -X rectangle-on \; \
	send-key -X rectangle-off \; \
	run-shell -d 0.1 \; \
	send-key -X copy-pipe-and-cancel "safecopy"
bind-key -T copy-mode-vi d send -X search-backward " |^diff --git" \; \
	send-key -X select-line \; \
	send -X search-forward " |^diff --git" \; \
	send-key -X cursor-up \; \
	send-key -X rectangle-on \; \
	send-key -X rectangle-off \; \
	run-shell -d 0.1 \; \
	send-key -X copy-pipe-and-cancel "safecopy"

bind-key C-b copy-mode -u
bind-key b copy-mode -u
# emacs
bind-key -T copy-mode C-r command-prompt -i -I \
	"#{pane_search_string}" -p "(search up)" \
	"send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode C-s command-prompt -i -I \
	"#{pane_search_string}" -p "(search down)" \
	"send -X search-forward-incremental \"%%%\""

# Override rectangular selection
# bind-key -T copy-mode-vi C-v send-keys -X page-down
bind-key -T copy-mode-vi Space send-keys -X page-down
bind-key -T copy-mode-vi NPage send-keys -X page-down
bind-key -T copy-mode-vi PPage send-keys -X page-up
bind-key -T copy-mode-vi M-< send-keys -X history-top
bind-key -T copy-mode-vi M-> send-keys -X history-bottom
bind-key -T copy-mode-vi M-v send-keys -X page-up
# bind-key -T copy-mode M-{ send-keys -X previous-paragraph
# bind-key -T copy-mode M-} send-keys -X next-paragraph
## Start `emacs` `copy-mode`
bind-key M-< copy-mode \; send-keys -X history-top
bind-key M-v copy-mode \; send-keys -X page-up
bind-key PPage copy-mode \; send-keys -X page-up
bind-key M-P run-shell "echo && ~/.bin/safepaste"

# Mouse
set -g mouse on
# Copy and Paste
bind-key -n DoubleClick1Pane \
	if-shell -F -t = "#{mouse_any_flag}" \
	"if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode \; send-keys -X select-word"
# Copy to system clipboard
# bind-key -T copy-mode-vi y \
# 	send-keys -X copy-pipe-and-cancel "safecopy"
bind-key -T copy-mode-vi y \
	if -F '#{selection_present}' { send-keys -X copy-pipe-and-cancel "safecopy" } { send-keys -X select-line }

# Don't dismiss selection after dragging
bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; send-keys -X copy-pipe-no-clear "safecopy"
bind-key -T copy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; send-keys -X copy-pipe-no-clear "safecopy"
bind-key -n TripleClick1Pane if-shell -F \
	-t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode ; send-keys -X select-line"
bind-key -T copy-mode-vi MouseDragEnd1Pane \
	send-keys -X copy-pipe-no-clear "safecopy"
# This dismisses copy mode when clicking, but as a side-effect it will dismiss
# some views when dragging, e.g., the list-keys view.
# Trying to `copy-pipe-and-cancel` on `MouseDown1Pane1` has two problems; One,
# it interferes with initiating a three-finger drag and sometimes dismisses it,
# and two, it means `copy-mode` gets dismissed when clicking to move the cursor.
# bind-key -T copy-mode-vi MouseDown1Pane send-keys -X \
# 	copy-pipe-and-cancel "safecopy" \; select-pane
bind-key -T copy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection
# This version dismisses without copying
# bind-key -T copy-mode-vi MouseUp1Pane send -X cancel
bind-key -T root MouseDown1Pane if-shell -F -t = "#{mouse_any_flag}" {
    if -Ft= "#{pane_in_mode}" {
        copy-mode -M
    } { 
        if-shell -Ft= '#{pane_active}' {
            send-keys -M
        } {
            select-pane -t =
        }
    }
} {
    if-shell -Ft= '#{pane_active}' {
        copy-mode
        send -X clear-selection
    } {
        select-pane -t =
    }
}

# Map Escape to cancel when using the search box Looks like this words by
# default as of `tmux 2.4` bind-key -T edit-mode-vi Escape send-keys -X cancel

# Install plugin manager with:
# `git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm`
# Plugins
set -g @plugin 'tmux-plugins/tpm'
# This was causing hanging issues on `aresdev`
# set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Don't restore any processes
set -g @resurrect-processes 'false'
# Save & Restore State Automatically
# set -g @plugin 'tmux-plugins/tmux-continuum'
# Automatically restore saved session
# set -g @continuum-restore 'on'

set -g @tpm-install "C-i"
set -g @tpm-update "C-u"
set -g @tpm-clean "C-U"
# Auto-install
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
# Initialize TMUX plugin manager (keep this line at the very bottom of
# tmux.conf)
# `<prefix>I` to install plugins
# `<prefix>U` to update plugins
run '~/.tmux/plugins/tpm/tpm'

# Set after tmux resurrect because both use `C-r`
bind-key C-r copy-mode \; \
	command-prompt -i -I "#{pane_search_string}" -p \
	"(search up)" "send -X search-backward-incremental \"%%%\""
# bind-key C-r copy-mode \; \
# 	command-prompt -i -p "search up" \
# 	"send -X search-backward-incremental \"%%%\""
# Vim-style search
bind-key ? copy-mode \; \
	command-prompt -i -p "search up" \
	"send -X search-backward-incremental \"%%%\""
# bind-key M-k copy-mode \; send-keys -X cursor-up
# bind-key k copy-mode \; send-keys -X cursor-up
bind-key K copy-mode \; send-keys -X cursor-up

unbind-key C-s

bind-key M-x run-shell "~/.tmux/plugins/tmux-resurrect/scripts/save.sh"
bind-key x run-shell "~/.tmux/plugins/tmux-resurrect/scripts/save.sh"
# bind-key M-R run-shell "~/.tmux/plugins/tmux-resurrect/scripts/restore.sh"

# Platform
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf' 'source ~/.tmux-linux.conf'
