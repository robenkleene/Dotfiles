# Settings

# Fix colors
# With `screen-256color`, underline is broken in Emacs
set -g default-terminal "xterm-256color"
# Handled by sensible
# set -g default-terminal "screen-256color"

# Send shift arrow keys (`vim-tmux-navigator` won't work without this)
set-option -g xterm-keys on

# increase scrollback lines
# Handled by sensible
# set -g history-limit 10000

# Remove delay
# Handled by sensible
# set -s escape-time 1

# Don't enforce size of smallest window
# Handled by sensible
# setw -g aggressive-resize on

# Required for `vim-tmux-clipboard`
set -g focus-events on

# With this setting on, if two terminals are accessing different windows in the
# two different sessions in the same session group, they'll have independent
# sizes. With it off, the session always has one size for all windows.
set -g aggressive-resize on

# At some point tmux started renaming windows based on process after every 
# command, even if it had already been renamed. This makes manual names stick.
set-option -g allow-rename off

# Make `_` and `-` part of words for double-clicking to select a word
set-option -g word-separators " @()[]{}:.,!;'\"<>/\\^$&+~?*"

# UI

# Remove administrative debris (session name, hostname, time) in status bar
set -g status-right ''
# Increase the max length of the left status
set -g status-left-length 40

# Auto-renumber windows
# (Removes gaps between window numbers)
set-option -g renumber-windows on

# Go to another session after closing the last window instead of exiting
set-option -g detach-on-destroy off

# Show window activity
# Current disabled because Neovim is constantly showing output
# set -g visual-activity on
# setw -g monitor-activity on


# Colors
# Available Colors
# black, red, green, yellow, blue, magenta, cyan, white
# And (colortest.pl):
# colour0-colour255

# Status
set -g status-style bg=colour239,fg=colour249

# Active window
setw -g window-status-current-style fg=brightwhite,bold
setw -g window-status-activity-style fg=green
# Messages
set -g message-style bg=default,fg=white
# Panes
set -g pane-border-style fg=colour239,bg=colour239
set -g pane-active-border-style fg=colour244,bg=colour244

# Selection
# The selection color is a hex approximation of the cyan color used for an
# active search in Vim. This is to differentiate for example between shell 
# contents with a highlighted search from `rg` and the active `tmux` search or
# selection.
set -g mode-style bg=cyan,fg=default

# set -g status-right '#{?client_prefix,#[reverse]Prefix#[noreverse],}'
set -g status-right '#{?client_prefix,#[fg=black]#[bg=cyan]-- PREFIX --,}'

# Bindings

# Prefix, this is important because C-b is page up in Vim
unbind C-b
# `C-space` is start selection in emacs
# set-option -g prefix C-Space
# `C-q` Conflicts with `C-x C-q` for `dired-toggle-read-only`
# It also conflicts with `C-q` for `quoted insert`
# set-option -g prefix C-q
# set-option -g prefix M-w
set-option -g prefix M-s
# `C-q` conflicts with the `zsh` run-one-command binding
# set-option -g prefix2 C-q
# bind-key C-q send-prefix
# bind-key M-s send-prefix
# bind-key C-q send-prefix
# `C-\` is hard to type on Apple keyboards
# set-option -g prefix 'C-\'

# Equal size panes
bind-key = select-layout even-vertical

# Split commands use current path
# * `pane_current_path` doesn't work when vim is opened from a subprocess, e.g, 
# `fzf | xargs -o vim`.
# * `$PWD` uses where the vim session was started from instead of the current
# directory, so `pane_current_path` is preferable
# bind-key % split-window -h -c "$PWD"
# bind-key '"' split-window -c "$PWD"
# bind-key c new-window -c "$PWD"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"
# bind-key '"' split-window -c "#{pane_current_path}"
bind-key s split-window -c "#{pane_current_path}"
# bind-key c new-window -a -c "#{pane_current_path}"
bind-key t new-window -a -c "#{pane_current_path}"
bind-key M-n next-window
bind-key M-p previous-window
bind-key T break-pane
# unbind-key c
bind-key c kill-pane
bind-key o kill-pane -a
bind-key q kill-window
bind-key Space resize-pane -Z

# For some reason adding the `-b` flag makes these not freeze
bind-key z run-shell -b 'tmux_switch'
bind-key M-z run-shell -b 'tmux_switch_window'

# Swap window
# bind-key > command-prompt "swap-window -t '%%'"
bind-key > command-prompt "run-shell 'tmux-insert-window %%'"

# Move
bind-key N swap-window -d -t :+1
bind-key P swap-window -d -t :-1

bind-key C-p paste-buffer

# New Session
# `S` is preferable because `M-n` is too easy to trigger accidentally
# bind-key S new
bind-key A new
bind-key M-A new
bind-key M-t new
# bind-key M-n new
# bind-key -n M-` switch-client -n
# bind-key -n M-~ switch-client -p
# bind-key -n M-` run-shell 'tmux_shell'
# This conflicts with using ESC to cancel
# bind-key Escape run-shell 'tmux_shell_new'
bind-key Tab run-shell 'tmux_shell_new'
bind-key ` run-shell 'tmux_shell_new'
bind-key M-` run-shell 'tmux_shell_new'
# unbind-key '~'
# bind-key '~' run-shell 'tmux_shell'

bind-key C-^ switch-client -l
bind-key ^ last-window

# Init
bind-key i source-file ~/.tmux.conf \; display "Sourced"

# Next Pane
# Note this doesn't work for some reason, it gets overwritten by tmux as
# `send-prefix`, so instead this binding is set on shell startup
# bind-key 'C-\' select-pane -t :.+
# bind-key C-q select-pane -t :.+
# bind-key C-q select-pane -t :.+
bind-key M-s select-pane -t :.+
bind-key M-S select-pane -t :.-
bind-key S select-pane -t :.-
bind-key C-w select-pane -t :.+
bind-key w select-pane -t :.+
bind-key W select-pane -t :.-
bind-key M-w select-pane -t :.+
# Couldn't figure out how to get this to work
# set -g prefix2 C-S-Space
# bind-key -n C-S-Space select-pane -t :.-

# Synchronize
bind-key m set-window-option synchronize-panes \; display "Synchronize toggled"

# Windows
# Make default window commands repeatable
# bind-key -r p previous-window
# bind-key -r n next-window
# Learn new tab bindings for these
# unbind-key p
# unbind-key n
# bind-key -r C-p previous-window
# bind-key -r C-n next-window
# vim-ish tab bindings
# bind-key -r T previous-window
# bind-key -r t next-window
# Switching Session
# This doesn't work for some reason, probably switch sessions is never
# repeatable
# bind-key -r ( switch-client -p
# bind-key -r ) switch-client -n

# Movement
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key M-h select-pane -L
bind-key M-j select-pane -D
bind-key M-k select-pane -U
bind-key M-l select-pane -R

# Resize
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Vim Style Editing Keys
setw -g mode-keys vi

# Mouse
set -g mouse on
# This works by default
# bind-key -T copy-mode-vi DoubleClick1Pane \
#     select-pane \; \
#     send-keys -X select-word
bind-key -n DoubleClick1Pane \
	if-shell -F -t = "#{mouse_any_flag}" \
	"if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode \; send-keys -X select-word"
# This fixes Vim panes jumping when clicking to select them, but then can't
# switch tmux panes by clicking
# Note this problem is only in Terminal.app, iTerm is fine.
# unbind-key -n MouseDown1Pane
# If the top pane is Vim, then dragging the bottom border messes up, so
# disabling dragging borders entirely until this is fixed.
# Note this problem is only in Terminal.app, iTerm is fine.
# unbind-key -n MouseDrag1Border


# Copy Mode
## vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi Space send-keys -X page-down
# bind-key -T copy-mode-vi Escape send-keys -X cancel
# Make search incremental
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""
# bind-key -T copy-mode-vi / command-prompt -p "search down" "send -X search-forward-incremental \"%%%\""
# bind-key -T copy-mode-vi ? command-prompt -p "search up" "send -X search-backward-incremental \"%%%\""
# This version probably only uses `tmux` internal clipboard
# Sensible sets `emacs-edit` for command line
# Not sure why this doesn't work
# bind-key -t emacs-edit M-BSpace delete-word
# bind-key -t emacs-edit C-g cancel
# Start `vi` `copy-mode`
# `u` for username & up
# bind-key g copy-mode \; send -X search-backward "$USER@" \; \
# 	send-key -X search-again
# To find the previous prompt, search backward for a non-breaking space. The
# convention is to have one as the last character of the prompt. This is
# `<C-k><space><space>` in Vim.
bind-key u copy-mode \; send -X search-backward " " \; \
	send-key -X search-again
bind-key y copy-mode \; send -X search-backward " " \; \
	send-key -X search-again \; \
	send-key -X cursor-down \; \
	send-key -X select-line \; \
	send-key -X history-bottom \; \
	send-key -X cursor-up \; \
	send-key -X copy-pipe-and-cancel "safecopy" \; \
	display "Output copied"
# This conflicts with close pane
# bind-key c copy-mode

bind-key C-b copy-mode -u
bind-key b copy-mode -u
# emacs
bind-key -T copy-mode C-r command-prompt -i -I \
	"#{pane_search_string}" -p "(search up)" \
	"send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode C-s command-prompt -i -I \
	"#{pane_search_string}" -p "(search down)" \
	"send -X search-forward-incremental \"%%%\""
# Override rectangular selection
bind-key -T copy-mode-vi C-v send-keys -X page-down
bind-key -T copy-mode-vi Space send-keys -X page-down
bind-key -T copy-mode-vi NPage send-keys -X page-down
bind-key -T copy-mode-vi PPage send-keys -X page-up
bind-key -T copy-mode-vi M-< send-keys -X history-top
bind-key -T copy-mode-vi M-> send-keys -X history-bottom
bind-key -T copy-mode-vi M-v send-keys -X page-up
# bind-key -T copy-mode M-{ send-keys -X previous-paragraph
# bind-key -T copy-mode M-} send-keys -X next-paragraph
## Start `emacs` `copy-mode`
bind-key M-< copy-mode \; send-keys -X history-top
bind-key M-v copy-mode \; send-keys -X page-up
bind-key PPage copy-mode \; send-keys -X page-up

# Map Escape to cancel when using the search box Looks like this words by
# default as of `tmux 2.4` bind-key -T edit-mode-vi Escape send-keys -X cancel

# Install plugin manager with:
# `git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm`
# Plugins
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Don't restore any processes
set -g @resurrect-processes 'false'
# Save & Restore State Automatically
# set -g @plugin 'tmux-plugins/tmux-continuum'
# Automatically restore saved session
# set -g @continuum-restore 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of
# tmux.conf)
# `<prefix>I` to install plugins
# `<prefix>U` to update plugins
run '~/.tmux/plugins/tpm/tpm'

# Set after tmux resurrect because both use `C-r`
bind-key C-r copy-mode \; \
	command-prompt -i -I "#{pane_search_string}" -p \
	"(search up)" "send -X search-backward-incremental \"%%%\""
# bind-key C-r copy-mode \; \
# 	command-prompt -i -p "search up" \
# 	"send -X search-backward-incremental \"%%%\""
# Vim-style search
bind-key ? copy-mode \; \
	command-prompt -i -p "search up" \
	"send -X search-backward-incremental \"%%%\""

# Copy to system clipboard
bind-key -T copy-mode-vi y \
	send-keys -X copy-pipe-and-cancel "safecopy"

# The below option will copy to clipboard and remain in copy mode
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"
# This option will dismiss copy mode and copy the selection to the system clipboard
bind-key -T copy-mode-vi MouseDragEnd1Pane \
	send-keys -X copy-pipe-and-cancel "safecopy"
# If `copy-pipe-and-cancel` is used that makes it difficult to copy multiple
# selections to a different `tmux` panes.
# This approach has problems because once a selection has started in `tmux`
# it's really difficult to truly cancel it
# bind-key -T copy-mode-vi y send-keys -X copy-pipe "pbcopy" \; \
# 	send-keys -X clear-selection \; \
# 	send-keys -X stop-selection
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"

bind-key B list-keys
unbind-key C-s
# bind-key M-s choose-tree -s
bind-key M-a choose-tree -s
bind-key a choose-tree -s
# `M-S` doesn't work over `ssh` from iPad
# Mmemonic for this is `M-s M-x`, which is the invert of `C-x C-s` which is
# save in Emacs (a stretch I know...)
bind-key M-x run-shell "~/.tmux/plugins/tmux-resurrect/scripts/save.sh"
bind-key x run-shell "~/.tmux/plugins/tmux-resurrect/scripts/save.sh"
# bind-key M-R run-shell "~/.tmux/plugins/tmux-resurrect/scripts/restore.sh"

# Platform
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'
if-shell 'test "$(uname)" = "Linux"' 'source ~/.tmux-linux.conf'
